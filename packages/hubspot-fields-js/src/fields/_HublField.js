/**
 * @typedef {Object} OccurrenceObject
 * @property {Number} min Minimum number of occurrences of this field group. Prevents users from having less than this number of items in the UI.
 * @property {Number} max Maximum number of occurrences of this group. Prevents the content creator from adding more than this number of items in the UI.
 * @property {String} sorting_label_field This is the field id, of the field to pull text from to show in the UI on the draggable cards. The default for this is the first field in the group.
 * @property {Number} default Number of default for this repeater. Words best when child fields have default values
 * 
 * @typedef {string} VisibilityField The name of the field that controls the display condition. Including nesting with group.name
 * 
 * @typedef {string} VisibilityFieldRegex The regular expression in the controlling field that needs to be present for the field to display. The regex must match the entire string (not a subset) and is run case-sensitively.
 * 
 * @typedef {('EQUAL'|'NOT_EQUAL'|'EMPTY'|'NOT_EMPTY'|'MATCHES_REGEX')} VisibilityFieldOperator The operator that defines how the controlling_value_regex value needs to be met.
 * 
 * @typedef {('AND'|'OR')} AdvancedVisibilityFieldOperator The boolean operator for the conditional criteria. Can be AND or OR.
 * 
 * @typedef {Object} VisibilityFieldObject
 * @property {VisibilityField} controlling_field
 * @property {VisibilityFieldRegex} controlling_value_regex
 * @property {VisibilityFieldOperator} operator
 * 
 * @typedef {Object} AdvancedVisibilityFieldObject
 * @property {AdvancedVisibilityFieldOperator} boolean_operator
 * @property {VisibilityFieldObject[]} criteria
 * 
 * @typedef {Object.<string, boolean>} VisibilitySubFields
 * 
 * @typedef FieldType
 * @property {string} help_text Text that will appear in the editor via tooltip to assist the content creator. Best used for information that is supplementary but not required to use the field.
 * @property {string} id Unique id for a field. This is generated by HubSpot. When building locally you do not need to specify this id.
 * @property {string} inline_help_text Help text that will be shown inline below the label of the field (limit 300 chars). Best used for information required to use the field.
 * @property {string} label The text the content creator sees describing the field. May contain spaces.
 * @property {boolean} locked Determines if the field is editable in the content editor. If true, the field will not appear in the content editor.
 * @property {string} name The variable name you will use to refer to this field's values, and is what the value of the field is stored against. Cannot contain spaces or special characters. If no name is provided, it will default to a lower  snake case value of the label.
 * @property {boolean} required Determines if the field can be left blank in the editor. If true, content will not be allowed to publish without filling out this field.
 * @property {string} type The type of field see field types below for documentation on all field types. {@link https://developers.hubspot.com/en/docs/cms/building-blocks/module-theme-fields#field-types}
 * @property {OccurrenceObject} occurrence Make the field/group repeatable
 * @property {Object} visibility Determines the display conditions for a field.
 * @property {VisibilitySubFields} hidden_subfields Subfields to Hide/Show
 * @property {('ADVANCED'|'SIMPLE')} visibility_rules By default, this value is set to SIMPLE. To use advanced_visibility, set to ADVANCED.
 * @property {AdvancedVisibilityFieldObject} advanced_visibility To include multiple criteria with multiple operators, as well as order of operations, you can use advanced_visibility.
 * @property {'half_width'|null} display_width Allows for side by side module fields in content editors, rather than full-width fields, when set to "half_width". The field will appear side-by-side with the next field in the fields.json file, as long as that field is also set to "half_width".
 * 
*/

/**
 * Base Field Class
 * Should only be used as parent to extend new classes.
 * 
 * @see {@link https://developers.hubspot.com/docs/cms/building-blocks/module-theme-fields-overview}
 * @see {@link https://developers.hubspot.com/en/docs/cms/building-blocks/module-theme-fields}
 * 
 * @since 2.0.0
*/
 module.exports = class _HublField {

	/**
	 * Base Field Constructor
	 * @param {FieldType} data
	*/
	constructor(data) {
		this.data = Object.assign({
			type: "",
			name: "",
			label: "",
			required: false,
			locked: false,
			inline_help_text: "",
			help_text: "",
			visibility: {},
			display_width: null
		}, data);
	}

	/**
	 * Return the fields as JSON. Used in Transform process.
	 * @private
	*/
	toJSON() {
		return this.data;
	}

    /**
     * Will Prevent this field from being transformed
     * @param {Boolean} flag
    */
	dontTransform(flag = true) {
        this.data.dontTransform = !!flag;
        return this;
	}

    /**
     * Set default value of field
     * @param {*} value 
    */
    default(value) {
        this.data.default = value || null;
        return this;
	}

    /**
     * Set any key.
     * @param {string} key 
     * @param {string} value 
    */
	set(key, value) {
		key = key.toLowerCase()
		if (key == 'type') {
			return this
		}
        this.data[key] = value;
        return this;
	}

    /**
     * Set name and label
     * @param {String} name 
     * @param {String} label 
    */
    name(name, label = null) {
        this.data.name = name;
        this.data.label = label || name;
        return this;
    }

    /**
     * Set label
     * @param {String} label 
    */
    label(label) {
        this.data.label = label;
        return this;
    }
	
	/**
     * Set id
     * @param {String} id 
    */
	id(id) {
        this.data.id = id;
        return this;
	}
	 
    /**
     * Determines if the field can be left blank in the editor. If true, content will not be allowed to publish without filling out this field.
     * @param {boolean}
    */
    required(required = true) {
        this.data.required = !!required;
        return this;
    }

    /**
     * Determines if the field is editable in the content editor. If "true", the field will not appear in the content editor.
     * @param {boolean} 
    */
    locked(locked = true) {
        this.data.locked = !!locked;
        return this;
    }

    /**
     * Set inline help text
     * @param {String} text 
    */
    inlineHelpText(text) {
        this.data.inline_help_text = text;
        return this;
    }

    /**
     * Set help text
     * @param {String} text 
    */
    helpText(text) {
        this.data.help_text = text;
        return this;
    }

    /**
     * Set field Visibility
	 * @see {@link https://developers.hubspot.com/docs/cms/building-blocks/module-theme-fields-overview#field-visibility}
	 * 
     * @param {(VisibilityField)} controlling_field The name of the field that controls the display condition. Including nesting with group.name
     * @param {VisibilityRegex} controlling_value_regex The regular expression in the controlling field that needs to be present for the field to display. The regex must match the entire string (not a subset) and is run case-sensitively.
 	 * @param {VisibilityFieldOperator} operator The operator that defines how the controlling_value_regex value needs to be met.
    */
    visibleIf(controlling_field, regex, operator) {
        if (!this.data.visibility) {
            this.data.visibility = {};
        }

		this.data.visibility = {
			...this.data.visibility,
            controlling_field: controlling_field,
            controlling_value_regex: regex,
            operator: operator || "EQUAL",
        };

        return this;
	}
	
	/**
     * Set Advanced field Visibility
	 * @see {@link https://developers.hubspot.com/docs/cms/building-blocks/module-theme-fields-overview#field-visibility}
	 * 
	 * Only applies if more than 1 rule. Operator defaults to "EQUAL" if ommitted
	 * 
	 * @example
	 * .advancedVisibleIf([
	 * 	["text_field", "value","EQUAL"],
	 * 	["text_field", null ,"NOT_EMPTY"],
	 * ],"OR")
	 * OR
	 * .advancedVisibleIf([
	 * 	{ controlling_field: "text_field",controlling_value_regex: "value",operator: "EQUAL"},
	 * 	["text_field", null ,"NOT_EMPTY"]
	 * ])
	 * 
     * @param {[VisibilityField,VisibilityRegex,VisibilityFieldOperator][]|VisibilityFieldObject[]} criteria
 	 * @param {AdvancedVisibilityFieldOperator} [operator="AND"] The operator that defines how the controlling_value_regex value needs to be met.
    */
	advancedVisibleIf(criteria = [], operator = "AND") { 
		if (criteria.length == 1) {
			let [controlling_field, regex, operator] = criteria[0] || []
			return this.visibleIf(controlling_field, regex, operator || null)
		}
		 
		if (!this.data.advanced_visibility) {
			this.data.advanced_visibility = {};
		}

		criteria = criteria.map(c => {
			if (typeof c != 'object') {
				return null
			}
			if (Array.isArray(c) && c.length > 1) {
				let [field, value, operator = "EQUAL"] = c
				c = [field, value, operator]
			}
			else { 
				let { controlling_field, controlling_value_regex, operator } = c
				c = [controlling_field, controlling_value_regex, operator]
			}
			return c
		}).filter(c => !!c)
		
		this.data.visibility_rules = "ADVANCED";
		this.data.advanced_visibility = {
			boolean_operator : ['AND','OR'].includes(operator) ? operator : 'AND',
			criteria
		}

        return this;
	}

    /**
     * Enable repeater
	 * @see {@link https://developers.hubspot.com/docs/cms/building-blocks/module-theme-fields-overview#repeaters}
	 * 
     * @param {OccurrenceObject} occurrence 
    */
    repeat({ min, max, sorting_label_field, default : defaultCount } = {}) {
		this.data.occurrence = {
            min: min || null,
            max: max || null,
            sorting_label_field: sorting_label_field || null,
            default: defaultCount || null
        };
        this.data.default = this.data.default || [];
        return this;
	}
	
	/**
	 * Wrapper for `.repeat(occurrence)`
	 * 
	 * @param {OccurrenceObject} occurrence 
	*/
	occurrence(occurrence = {}) {
		return this.repeat(occurrence)
	}

    /**
     * 
     * @param {VisibilitySubFields} subFields Subfields to Hide/Show eg. {opacity: true}
    */
    hiddenSubfields(subFields) {
        if (!this.data.visibility) {
			this.data.visibility = {};
			this.data.visibility.hidden_subfields = {}
        }
		this.data.visibility.hidden_subfields = {
			...(this.data.visibility.hidden_subfields || {}),
			...subFields
		};
        return this;
    }

	/**
     * Set Apply to field if condition is true
     * @param {Boolean} condition 
     * @param {Function} callback 
    */
	applyIf(condition, callback) {
		if (!!condition) {
			return callback(this)
        }
        return this;
	}

    /**
     * Set Inherit default Value
	 * 
	 * @see {@link https://developers.hubspot.com/docs/cms/building-blocks/module-theme-fields-overview#inherited-fields}
	 * @example
	 * .inheritedValue('module.body_font)
	 * 
     * @param {String} fieldPath Path to field
	 * 
    */
    inheritedValue(fieldPath) {
        if (!this.data.inherited_value) {
			this.data.inherited_value = {};
        }
		this.data.inherited_value.default_value_path = fieldPath || null;
        return this;
    }
	
}